//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18033.
// 
#pragma warning disable 1591

namespace WapXzone_VNM.CreateGIFAvatar {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Ws_ProcessSoap", Namespace="http://tempuri.org/")]
    public partial class Ws_Process : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAvatarOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvatarByColorOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateAvatarThumnailByColorOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateAvatarThumnailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvatarGifOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvatarGifWithTextWaterMarkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvatarGifWithTextWaterMarkAndDellOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvatarWithTextWaterMarkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvatarWithTextWaterMarkAndDellOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Ws_Process() {
            this.Url = global::WapXzone_VNM.Properties.Settings.Default.WapXzone_CreateGIFAvatar_Ws_Process;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAvatarCompletedEventHandler GetAvatarCompleted;
        
        /// <remarks/>
        public event GetAvatarByColorCompletedEventHandler GetAvatarByColorCompleted;
        
        /// <remarks/>
        public event GenerateAvatarThumnailByColorCompletedEventHandler GenerateAvatarThumnailByColorCompleted;
        
        /// <remarks/>
        public event GenerateAvatarThumnailCompletedEventHandler GenerateAvatarThumnailCompleted;
        
        /// <remarks/>
        public event GetAvatarGifCompletedEventHandler GetAvatarGifCompleted;
        
        /// <remarks/>
        public event GetAvatarGifWithTextWaterMarkCompletedEventHandler GetAvatarGifWithTextWaterMarkCompleted;
        
        /// <remarks/>
        public event GetAvatarGifWithTextWaterMarkAndDellCompletedEventHandler GetAvatarGifWithTextWaterMarkAndDellCompleted;
        
        /// <remarks/>
        public event GetAvatarWithTextWaterMarkCompletedEventHandler GetAvatarWithTextWaterMarkCompleted;
        
        /// <remarks/>
        public event GetAvatarWithTextWaterMarkAndDellCompletedEventHandler GetAvatarWithTextWaterMarkAndDellCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatar", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvatar(string avatarPath, int width, int height) {
            object[] results = this.Invoke("GetAvatar", new object[] {
                        avatarPath,
                        width,
                        height});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvatarAsync(string avatarPath, int width, int height) {
            this.GetAvatarAsync(avatarPath, width, height, null);
        }
        
        /// <remarks/>
        public void GetAvatarAsync(string avatarPath, int width, int height, object userState) {
            if ((this.GetAvatarOperationCompleted == null)) {
                this.GetAvatarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarOperationCompleted);
            }
            this.InvokeAsync("GetAvatar", new object[] {
                        avatarPath,
                        width,
                        height}, this.GetAvatarOperationCompleted, userState);
        }
        
        private void OnGetAvatarOperationCompleted(object arg) {
            if ((this.GetAvatarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarCompleted(this, new GetAvatarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatarByColor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvatarByColor(string avatarPath, int width, int height, int color) {
            object[] results = this.Invoke("GetAvatarByColor", new object[] {
                        avatarPath,
                        width,
                        height,
                        color});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvatarByColorAsync(string avatarPath, int width, int height, int color) {
            this.GetAvatarByColorAsync(avatarPath, width, height, color, null);
        }
        
        /// <remarks/>
        public void GetAvatarByColorAsync(string avatarPath, int width, int height, int color, object userState) {
            if ((this.GetAvatarByColorOperationCompleted == null)) {
                this.GetAvatarByColorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarByColorOperationCompleted);
            }
            this.InvokeAsync("GetAvatarByColor", new object[] {
                        avatarPath,
                        width,
                        height,
                        color}, this.GetAvatarByColorOperationCompleted, userState);
        }
        
        private void OnGetAvatarByColorOperationCompleted(object arg) {
            if ((this.GetAvatarByColorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarByColorCompleted(this, new GetAvatarByColorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenerateAvatarThumnailByColor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateAvatarThumnailByColor(string url, int width, int height, int color) {
            object[] results = this.Invoke("GenerateAvatarThumnailByColor", new object[] {
                        url,
                        width,
                        height,
                        color});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateAvatarThumnailByColorAsync(string url, int width, int height, int color) {
            this.GenerateAvatarThumnailByColorAsync(url, width, height, color, null);
        }
        
        /// <remarks/>
        public void GenerateAvatarThumnailByColorAsync(string url, int width, int height, int color, object userState) {
            if ((this.GenerateAvatarThumnailByColorOperationCompleted == null)) {
                this.GenerateAvatarThumnailByColorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateAvatarThumnailByColorOperationCompleted);
            }
            this.InvokeAsync("GenerateAvatarThumnailByColor", new object[] {
                        url,
                        width,
                        height,
                        color}, this.GenerateAvatarThumnailByColorOperationCompleted, userState);
        }
        
        private void OnGenerateAvatarThumnailByColorOperationCompleted(object arg) {
            if ((this.GenerateAvatarThumnailByColorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateAvatarThumnailByColorCompleted(this, new GenerateAvatarThumnailByColorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenerateAvatarThumnail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateAvatarThumnail(string url, int width, int height) {
            object[] results = this.Invoke("GenerateAvatarThumnail", new object[] {
                        url,
                        width,
                        height});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateAvatarThumnailAsync(string url, int width, int height) {
            this.GenerateAvatarThumnailAsync(url, width, height, null);
        }
        
        /// <remarks/>
        public void GenerateAvatarThumnailAsync(string url, int width, int height, object userState) {
            if ((this.GenerateAvatarThumnailOperationCompleted == null)) {
                this.GenerateAvatarThumnailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateAvatarThumnailOperationCompleted);
            }
            this.InvokeAsync("GenerateAvatarThumnail", new object[] {
                        url,
                        width,
                        height}, this.GenerateAvatarThumnailOperationCompleted, userState);
        }
        
        private void OnGenerateAvatarThumnailOperationCompleted(object arg) {
            if ((this.GenerateAvatarThumnailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateAvatarThumnailCompleted(this, new GenerateAvatarThumnailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatarGif", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvatarGif(string avatarPath, int width, int height) {
            object[] results = this.Invoke("GetAvatarGif", new object[] {
                        avatarPath,
                        width,
                        height});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvatarGifAsync(string avatarPath, int width, int height) {
            this.GetAvatarGifAsync(avatarPath, width, height, null);
        }
        
        /// <remarks/>
        public void GetAvatarGifAsync(string avatarPath, int width, int height, object userState) {
            if ((this.GetAvatarGifOperationCompleted == null)) {
                this.GetAvatarGifOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarGifOperationCompleted);
            }
            this.InvokeAsync("GetAvatarGif", new object[] {
                        avatarPath,
                        width,
                        height}, this.GetAvatarGifOperationCompleted, userState);
        }
        
        private void OnGetAvatarGifOperationCompleted(object arg) {
            if ((this.GetAvatarGifCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarGifCompleted(this, new GetAvatarGifCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatarGifWithTextWaterMark", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvatarGifWithTextWaterMark(string avatarPath, int width, int height, string strText, string font, int fontSize, bool fontBold, int floatx, int floaty) {
            object[] results = this.Invoke("GetAvatarGifWithTextWaterMark", new object[] {
                        avatarPath,
                        width,
                        height,
                        strText,
                        font,
                        fontSize,
                        fontBold,
                        floatx,
                        floaty});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvatarGifWithTextWaterMarkAsync(string avatarPath, int width, int height, string strText, string font, int fontSize, bool fontBold, int floatx, int floaty) {
            this.GetAvatarGifWithTextWaterMarkAsync(avatarPath, width, height, strText, font, fontSize, fontBold, floatx, floaty, null);
        }
        
        /// <remarks/>
        public void GetAvatarGifWithTextWaterMarkAsync(string avatarPath, int width, int height, string strText, string font, int fontSize, bool fontBold, int floatx, int floaty, object userState) {
            if ((this.GetAvatarGifWithTextWaterMarkOperationCompleted == null)) {
                this.GetAvatarGifWithTextWaterMarkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarGifWithTextWaterMarkOperationCompleted);
            }
            this.InvokeAsync("GetAvatarGifWithTextWaterMark", new object[] {
                        avatarPath,
                        width,
                        height,
                        strText,
                        font,
                        fontSize,
                        fontBold,
                        floatx,
                        floaty}, this.GetAvatarGifWithTextWaterMarkOperationCompleted, userState);
        }
        
        private void OnGetAvatarGifWithTextWaterMarkOperationCompleted(object arg) {
            if ((this.GetAvatarGifWithTextWaterMarkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarGifWithTextWaterMarkCompleted(this, new GetAvatarGifWithTextWaterMarkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatarGifWithTextWaterMarkAndDell", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvatarGifWithTextWaterMarkAndDell(string avatarPath, int width, int height, string strText, string font, int fontSize, bool fontBold, int floatx, int floaty, bool isDell) {
            object[] results = this.Invoke("GetAvatarGifWithTextWaterMarkAndDell", new object[] {
                        avatarPath,
                        width,
                        height,
                        strText,
                        font,
                        fontSize,
                        fontBold,
                        floatx,
                        floaty,
                        isDell});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvatarGifWithTextWaterMarkAndDellAsync(string avatarPath, int width, int height, string strText, string font, int fontSize, bool fontBold, int floatx, int floaty, bool isDell) {
            this.GetAvatarGifWithTextWaterMarkAndDellAsync(avatarPath, width, height, strText, font, fontSize, fontBold, floatx, floaty, isDell, null);
        }
        
        /// <remarks/>
        public void GetAvatarGifWithTextWaterMarkAndDellAsync(string avatarPath, int width, int height, string strText, string font, int fontSize, bool fontBold, int floatx, int floaty, bool isDell, object userState) {
            if ((this.GetAvatarGifWithTextWaterMarkAndDellOperationCompleted == null)) {
                this.GetAvatarGifWithTextWaterMarkAndDellOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarGifWithTextWaterMarkAndDellOperationCompleted);
            }
            this.InvokeAsync("GetAvatarGifWithTextWaterMarkAndDell", new object[] {
                        avatarPath,
                        width,
                        height,
                        strText,
                        font,
                        fontSize,
                        fontBold,
                        floatx,
                        floaty,
                        isDell}, this.GetAvatarGifWithTextWaterMarkAndDellOperationCompleted, userState);
        }
        
        private void OnGetAvatarGifWithTextWaterMarkAndDellOperationCompleted(object arg) {
            if ((this.GetAvatarGifWithTextWaterMarkAndDellCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarGifWithTextWaterMarkAndDellCompleted(this, new GetAvatarGifWithTextWaterMarkAndDellCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatarWithTextWaterMark", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvatarWithTextWaterMark(string avatarPath, int width, int height, string strText, string font, int fontSize, bool fontBold, int floatx, int floaty) {
            object[] results = this.Invoke("GetAvatarWithTextWaterMark", new object[] {
                        avatarPath,
                        width,
                        height,
                        strText,
                        font,
                        fontSize,
                        fontBold,
                        floatx,
                        floaty});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvatarWithTextWaterMarkAsync(string avatarPath, int width, int height, string strText, string font, int fontSize, bool fontBold, int floatx, int floaty) {
            this.GetAvatarWithTextWaterMarkAsync(avatarPath, width, height, strText, font, fontSize, fontBold, floatx, floaty, null);
        }
        
        /// <remarks/>
        public void GetAvatarWithTextWaterMarkAsync(string avatarPath, int width, int height, string strText, string font, int fontSize, bool fontBold, int floatx, int floaty, object userState) {
            if ((this.GetAvatarWithTextWaterMarkOperationCompleted == null)) {
                this.GetAvatarWithTextWaterMarkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarWithTextWaterMarkOperationCompleted);
            }
            this.InvokeAsync("GetAvatarWithTextWaterMark", new object[] {
                        avatarPath,
                        width,
                        height,
                        strText,
                        font,
                        fontSize,
                        fontBold,
                        floatx,
                        floaty}, this.GetAvatarWithTextWaterMarkOperationCompleted, userState);
        }
        
        private void OnGetAvatarWithTextWaterMarkOperationCompleted(object arg) {
            if ((this.GetAvatarWithTextWaterMarkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarWithTextWaterMarkCompleted(this, new GetAvatarWithTextWaterMarkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatarWithTextWaterMarkAndDell", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvatarWithTextWaterMarkAndDell(string avatarPath, int width, int height, string strText, string font, int fontSize, bool fontBold, int floatx, int floaty, bool isDell) {
            object[] results = this.Invoke("GetAvatarWithTextWaterMarkAndDell", new object[] {
                        avatarPath,
                        width,
                        height,
                        strText,
                        font,
                        fontSize,
                        fontBold,
                        floatx,
                        floaty,
                        isDell});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvatarWithTextWaterMarkAndDellAsync(string avatarPath, int width, int height, string strText, string font, int fontSize, bool fontBold, int floatx, int floaty, bool isDell) {
            this.GetAvatarWithTextWaterMarkAndDellAsync(avatarPath, width, height, strText, font, fontSize, fontBold, floatx, floaty, isDell, null);
        }
        
        /// <remarks/>
        public void GetAvatarWithTextWaterMarkAndDellAsync(string avatarPath, int width, int height, string strText, string font, int fontSize, bool fontBold, int floatx, int floaty, bool isDell, object userState) {
            if ((this.GetAvatarWithTextWaterMarkAndDellOperationCompleted == null)) {
                this.GetAvatarWithTextWaterMarkAndDellOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarWithTextWaterMarkAndDellOperationCompleted);
            }
            this.InvokeAsync("GetAvatarWithTextWaterMarkAndDell", new object[] {
                        avatarPath,
                        width,
                        height,
                        strText,
                        font,
                        fontSize,
                        fontBold,
                        floatx,
                        floaty,
                        isDell}, this.GetAvatarWithTextWaterMarkAndDellOperationCompleted, userState);
        }
        
        private void OnGetAvatarWithTextWaterMarkAndDellOperationCompleted(object arg) {
            if ((this.GetAvatarWithTextWaterMarkAndDellCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarWithTextWaterMarkAndDellCompleted(this, new GetAvatarWithTextWaterMarkAndDellCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAvatarCompletedEventHandler(object sender, GetAvatarCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvatarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvatarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAvatarByColorCompletedEventHandler(object sender, GetAvatarByColorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvatarByColorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvatarByColorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GenerateAvatarThumnailByColorCompletedEventHandler(object sender, GenerateAvatarThumnailByColorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateAvatarThumnailByColorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateAvatarThumnailByColorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GenerateAvatarThumnailCompletedEventHandler(object sender, GenerateAvatarThumnailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateAvatarThumnailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateAvatarThumnailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAvatarGifCompletedEventHandler(object sender, GetAvatarGifCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvatarGifCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvatarGifCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAvatarGifWithTextWaterMarkCompletedEventHandler(object sender, GetAvatarGifWithTextWaterMarkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvatarGifWithTextWaterMarkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvatarGifWithTextWaterMarkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAvatarGifWithTextWaterMarkAndDellCompletedEventHandler(object sender, GetAvatarGifWithTextWaterMarkAndDellCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvatarGifWithTextWaterMarkAndDellCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvatarGifWithTextWaterMarkAndDellCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAvatarWithTextWaterMarkCompletedEventHandler(object sender, GetAvatarWithTextWaterMarkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvatarWithTextWaterMarkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvatarWithTextWaterMarkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAvatarWithTextWaterMarkAndDellCompletedEventHandler(object sender, GetAvatarWithTextWaterMarkAndDellCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvatarWithTextWaterMarkAndDellCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvatarWithTextWaterMarkAndDellCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591
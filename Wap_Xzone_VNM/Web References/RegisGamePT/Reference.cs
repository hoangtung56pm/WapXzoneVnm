//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18408.
// 
#pragma warning disable 1591

namespace WapXzone_VNM.RegisGamePT {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ProcessMOSoap", Namespace="http://tempuri.org/")]
    public partial class ProcessMO : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SMSMOReceiverOperationCompleted;
        
        private System.Threading.SendOrPostCallback SMSMOReceiver_VoiceChatOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ProcessMO() {
            this.Url = global::WapXzone_VNM.Properties.Settings.Default.WapXzone_VNM_RegisGamePT_ProcessMO;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SMSMOReceiverCompletedEventHandler SMSMOReceiverCompleted;
        
        /// <remarks/>
        public event SMSMOReceiver_VoiceChatCompletedEventHandler SMSMOReceiver_VoiceChatCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SMSMOReceiver", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SMSMOReceiver(string Command_Code, string Service_ID, string User_ID, string Message, string Request_ID) {
            object[] results = this.Invoke("SMSMOReceiver", new object[] {
                        Command_Code,
                        Service_ID,
                        User_ID,
                        Message,
                        Request_ID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SMSMOReceiverAsync(string Command_Code, string Service_ID, string User_ID, string Message, string Request_ID) {
            this.SMSMOReceiverAsync(Command_Code, Service_ID, User_ID, Message, Request_ID, null);
        }
        
        /// <remarks/>
        public void SMSMOReceiverAsync(string Command_Code, string Service_ID, string User_ID, string Message, string Request_ID, object userState) {
            if ((this.SMSMOReceiverOperationCompleted == null)) {
                this.SMSMOReceiverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSMSMOReceiverOperationCompleted);
            }
            this.InvokeAsync("SMSMOReceiver", new object[] {
                        Command_Code,
                        Service_ID,
                        User_ID,
                        Message,
                        Request_ID}, this.SMSMOReceiverOperationCompleted, userState);
        }
        
        private void OnSMSMOReceiverOperationCompleted(object arg) {
            if ((this.SMSMOReceiverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SMSMOReceiverCompleted(this, new SMSMOReceiverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SMSMOReceiver_VoiceChat", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SMSMOReceiver_VoiceChat(string Command_Code, string Service_ID, string User_ID, string Message, string Request_ID, string Channel) {
            object[] results = this.Invoke("SMSMOReceiver_VoiceChat", new object[] {
                        Command_Code,
                        Service_ID,
                        User_ID,
                        Message,
                        Request_ID,
                        Channel});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SMSMOReceiver_VoiceChatAsync(string Command_Code, string Service_ID, string User_ID, string Message, string Request_ID, string Channel) {
            this.SMSMOReceiver_VoiceChatAsync(Command_Code, Service_ID, User_ID, Message, Request_ID, Channel, null);
        }
        
        /// <remarks/>
        public void SMSMOReceiver_VoiceChatAsync(string Command_Code, string Service_ID, string User_ID, string Message, string Request_ID, string Channel, object userState) {
            if ((this.SMSMOReceiver_VoiceChatOperationCompleted == null)) {
                this.SMSMOReceiver_VoiceChatOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSMSMOReceiver_VoiceChatOperationCompleted);
            }
            this.InvokeAsync("SMSMOReceiver_VoiceChat", new object[] {
                        Command_Code,
                        Service_ID,
                        User_ID,
                        Message,
                        Request_ID,
                        Channel}, this.SMSMOReceiver_VoiceChatOperationCompleted, userState);
        }
        
        private void OnSMSMOReceiver_VoiceChatOperationCompleted(object arg) {
            if ((this.SMSMOReceiver_VoiceChatCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SMSMOReceiver_VoiceChatCompleted(this, new SMSMOReceiver_VoiceChatCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SMSMOReceiverCompletedEventHandler(object sender, SMSMOReceiverCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SMSMOReceiverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SMSMOReceiverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SMSMOReceiver_VoiceChatCompletedEventHandler(object sender, SMSMOReceiver_VoiceChatCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SMSMOReceiver_VoiceChatCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SMSMOReceiver_VoiceChatCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.225.
// 
#pragma warning disable 1591

namespace WapXzone_VNM.vn.xzone.media.TinTucTheThaoSo {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GetAvatarThumbSoap", Namespace="http://tempuri.org/")]
    public partial class GetAvatarThumb : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAvatarOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvatarNotCropOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvatarByCropOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvatarByCropFromBackendOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvatarWithTextWaterMarkWithResizeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GetAvatarThumb() {
            this.Url = global::WapXzone_VNM.Properties.Settings.Default.WapXzone_VNM_vn_xzone_media_TinTucTheThaoSo_GetAvatarThumb;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAvatarCompletedEventHandler GetAvatarCompleted;
        
        /// <remarks/>
        public event GetAvatarNotCropCompletedEventHandler GetAvatarNotCropCompleted;
        
        /// <remarks/>
        public event GetAvatarByCropCompletedEventHandler GetAvatarByCropCompleted;
        
        /// <remarks/>
        public event GetAvatarByCropFromBackendCompletedEventHandler GetAvatarByCropFromBackendCompleted;
        
        /// <remarks/>
        public event GetAvatarWithTextWaterMarkWithResizeCompletedEventHandler GetAvatarWithTextWaterMarkWithResizeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatar", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvatar(string avatarPath, int width, int height) {
            object[] results = this.Invoke("GetAvatar", new object[] {
                        avatarPath,
                        width,
                        height});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvatarAsync(string avatarPath, int width, int height) {
            this.GetAvatarAsync(avatarPath, width, height, null);
        }
        
        /// <remarks/>
        public void GetAvatarAsync(string avatarPath, int width, int height, object userState) {
            if ((this.GetAvatarOperationCompleted == null)) {
                this.GetAvatarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarOperationCompleted);
            }
            this.InvokeAsync("GetAvatar", new object[] {
                        avatarPath,
                        width,
                        height}, this.GetAvatarOperationCompleted, userState);
        }
        
        private void OnGetAvatarOperationCompleted(object arg) {
            if ((this.GetAvatarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarCompleted(this, new GetAvatarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatarNotCrop", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvatarNotCrop(string avatarPath, int width, int height) {
            object[] results = this.Invoke("GetAvatarNotCrop", new object[] {
                        avatarPath,
                        width,
                        height});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvatarNotCropAsync(string avatarPath, int width, int height) {
            this.GetAvatarNotCropAsync(avatarPath, width, height, null);
        }
        
        /// <remarks/>
        public void GetAvatarNotCropAsync(string avatarPath, int width, int height, object userState) {
            if ((this.GetAvatarNotCropOperationCompleted == null)) {
                this.GetAvatarNotCropOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarNotCropOperationCompleted);
            }
            this.InvokeAsync("GetAvatarNotCrop", new object[] {
                        avatarPath,
                        width,
                        height}, this.GetAvatarNotCropOperationCompleted, userState);
        }
        
        private void OnGetAvatarNotCropOperationCompleted(object arg) {
            if ((this.GetAvatarNotCropCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarNotCropCompleted(this, new GetAvatarNotCropCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatarByCrop", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvatarByCrop(string avatarPath, int width, int height) {
            object[] results = this.Invoke("GetAvatarByCrop", new object[] {
                        avatarPath,
                        width,
                        height});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvatarByCropAsync(string avatarPath, int width, int height) {
            this.GetAvatarByCropAsync(avatarPath, width, height, null);
        }
        
        /// <remarks/>
        public void GetAvatarByCropAsync(string avatarPath, int width, int height, object userState) {
            if ((this.GetAvatarByCropOperationCompleted == null)) {
                this.GetAvatarByCropOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarByCropOperationCompleted);
            }
            this.InvokeAsync("GetAvatarByCrop", new object[] {
                        avatarPath,
                        width,
                        height}, this.GetAvatarByCropOperationCompleted, userState);
        }
        
        private void OnGetAvatarByCropOperationCompleted(object arg) {
            if ((this.GetAvatarByCropCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarByCropCompleted(this, new GetAvatarByCropCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatarByCropFromBackend", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetAvatarByCropFromBackend(string avatarPath) {
            this.Invoke("GetAvatarByCropFromBackend", new object[] {
                        avatarPath});
        }
        
        /// <remarks/>
        public void GetAvatarByCropFromBackendAsync(string avatarPath) {
            this.GetAvatarByCropFromBackendAsync(avatarPath, null);
        }
        
        /// <remarks/>
        public void GetAvatarByCropFromBackendAsync(string avatarPath, object userState) {
            if ((this.GetAvatarByCropFromBackendOperationCompleted == null)) {
                this.GetAvatarByCropFromBackendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarByCropFromBackendOperationCompleted);
            }
            this.InvokeAsync("GetAvatarByCropFromBackend", new object[] {
                        avatarPath}, this.GetAvatarByCropFromBackendOperationCompleted, userState);
        }
        
        private void OnGetAvatarByCropFromBackendOperationCompleted(object arg) {
            if ((this.GetAvatarByCropFromBackendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarByCropFromBackendCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvatarWithTextWaterMarkWithResize", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvatarWithTextWaterMarkWithResize(string avatarPath, string strText, string font, int fontSize, bool fontBold, int floatx, int isOverwrite, int width) {
            object[] results = this.Invoke("GetAvatarWithTextWaterMarkWithResize", new object[] {
                        avatarPath,
                        strText,
                        font,
                        fontSize,
                        fontBold,
                        floatx,
                        isOverwrite,
                        width});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvatarWithTextWaterMarkWithResizeAsync(string avatarPath, string strText, string font, int fontSize, bool fontBold, int floatx, int isOverwrite, int width) {
            this.GetAvatarWithTextWaterMarkWithResizeAsync(avatarPath, strText, font, fontSize, fontBold, floatx, isOverwrite, width, null);
        }
        
        /// <remarks/>
        public void GetAvatarWithTextWaterMarkWithResizeAsync(string avatarPath, string strText, string font, int fontSize, bool fontBold, int floatx, int isOverwrite, int width, object userState) {
            if ((this.GetAvatarWithTextWaterMarkWithResizeOperationCompleted == null)) {
                this.GetAvatarWithTextWaterMarkWithResizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvatarWithTextWaterMarkWithResizeOperationCompleted);
            }
            this.InvokeAsync("GetAvatarWithTextWaterMarkWithResize", new object[] {
                        avatarPath,
                        strText,
                        font,
                        fontSize,
                        fontBold,
                        floatx,
                        isOverwrite,
                        width}, this.GetAvatarWithTextWaterMarkWithResizeOperationCompleted, userState);
        }
        
        private void OnGetAvatarWithTextWaterMarkWithResizeOperationCompleted(object arg) {
            if ((this.GetAvatarWithTextWaterMarkWithResizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvatarWithTextWaterMarkWithResizeCompleted(this, new GetAvatarWithTextWaterMarkWithResizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAvatarCompletedEventHandler(object sender, GetAvatarCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvatarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvatarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAvatarNotCropCompletedEventHandler(object sender, GetAvatarNotCropCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvatarNotCropCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvatarNotCropCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAvatarByCropCompletedEventHandler(object sender, GetAvatarByCropCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvatarByCropCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvatarByCropCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAvatarByCropFromBackendCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAvatarWithTextWaterMarkWithResizeCompletedEventHandler(object sender, GetAvatarWithTextWaterMarkWithResizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvatarWithTextWaterMarkWithResizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvatarWithTextWaterMarkWithResizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591